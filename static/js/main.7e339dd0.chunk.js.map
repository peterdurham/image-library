{"version":3,"sources":["Components/Backdrop.js","Components/Modal.js","Components/Search.js","Components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Backdrop","props","show","react_default","a","createElement","className","onClick","clicked","Modal","Components_Backdrop","this","modalClosed","style","transform","opacity","children","Component","Search","type","placeholder","onChange","event","bindSearchInput","target","value","searchImages","searchInput","Results","searchLabel","searchResults","length","lastInput","pixabayLink","href","map","result","src","webformatURL","alt","viewImage","id","App","state","viewingImage","imageToView","bindSearchInputHandler","input","_this","setState","searchImagesHandler","replace","URL","concat","fetch","then","r","json","data","console","log","hits","forEach","hit","previewWidth","previewURL","largeImageURL","webformatHeight","webformatWidth","push","catch","err","viewImageHandler","idToView","setTimeout","Object","toConsumableArray","filter","viewCancelHandler","Components_Modal","class","Components_Search","Components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e339dd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Backdrop = (props) => (\r\n    props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default Backdrop;","import React, {Component} from 'react';\r\n\r\nimport '../App.css';\r\nimport Backdrop from './Backdrop';\r\n\r\nclass Modal extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Backdrop show={this.props.show} clicked={this.props.modalClosed} />\r\n                <div \r\n                    className=\"Modal\"\r\n                    style={{\r\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                        opacity: this.props.show ? '1' : '0'\r\n                    }}>\r\n                    \r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"search__box\">\r\n          <div className=\"search__label\">Image Library</div>\r\n            <div className=\"search__input--features\">\r\n              <input type=\"text\" className=\"search__input\" placeholder=\"Search images\" onChange={(event)=>props.bindSearchInput(event.target.value)}/>\r\n              <button className=\"search__button\" onClick={()=>props.searchImages(props.searchInput)}>Search</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Results = (props) => {\r\n    let searchLabel = (props.searchResults.length > 0) ?\r\n    <p className=\"searchresults__text\">Search results for <span className=\"bold-text\">{props.lastInput}</span> (click for larger images) </p> :\r\n    null\r\n    \r\n    let pixabayLink = (props.searchResults.length > 0) ?\r\n    <p>Photos generated from <a href=\"https://pixabay.com/\" className=\"pixabay__link\">Pixabay</a> API</p> : null\r\n    \r\n\r\n    return (\r\n        <div>\r\n            \r\n            {searchLabel}\r\n            <div className=\"search__results\">\r\n                {props.searchResults.map((result)=><img \r\n                    src={result.webformatURL} \r\n                    className=\"search__image\" \r\n                    alt=\"search result\"\r\n                    onClick={()=>props.viewImage(result.id)}\r\n                />)}\r\n            </div>\r\n            {pixabayLink}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Modal from './Components/Modal';\nimport Search from './Components/Search';\nimport Results from './Components/Results';\n\nclass App extends Component {\n  state = {\n    searchResults: [],\n    searchInput: '',\n    lastInput: '',\n    viewingImage: false,\n    imageToView: null\n  }\n  \n  bindSearchInputHandler = (input) => {\n    this.setState(()=>({ searchInput: input }))\n  }\n  searchImagesHandler = (input) => {\n    input = input.replace(\" \", \"+\");\n    let URL = `https://pixabay.com/api/?key=10823850-e691644d7a93a21619904f332&q=${input}&image_type=photo`\n    return fetch(URL)\n          .then(r => r.json())\n          .then(data => {\n              console.log(data.hits);\n              let searchResults = [];\n              data.hits.forEach((hit)=>{\n                let result = {\n                  id: hit.id,\n                  previewWidth: hit.previewWidth,\n                  previewURL: hit.previewURL,\n                  largeImageURL: hit.largeImageURL,\n                  webformatHeight: hit.webformatHeight,\n                  webformatWidth: hit.webformatWidth,\n                  webformatURL: hit.webformatURL\n                }\n                searchResults.push(result);\n              })\n              this.setState(()=>({ searchResults, lastInput: input }))\n          })\n          .catch(err => {\n              console.log(err)\n          })\n  } \n  viewImageHandler = (idToView) => {\n    setTimeout(()=>{\n      let searchResults = [...this.state.searchResults];\n      let filtered = searchResults.filter((result)=>result.id === idToView);\n      let imageToView = filtered[0].largeImageURL;\n      ;\n      this.setState(()=>({ imageToView, viewingImage: true }))\n    }, 400)\n    \n  }\n  viewCancelHandler = () => {\n    this.setState(()=>({ viewingImage: false }))\n  }\n  \n  render() {\n    \n\n\n    return (\n      <div className=\"App\">\n        <Modal show={this.state.viewingImage} modalClosed={this.viewCancelHandler}>\n          <img src={this.state.imageToView} class=\"modal__image\" alt=\"viewed\"/>\n        </Modal>\n        <Search\n          searchInput = {this.state.searchInput}\n          searchImages = {this.searchImagesHandler}\n          bindSearchInput = {this.bindSearchInputHandler}\n        />\n        <Results \n          searchResults = {this.state.searchResults}\n          lastInput = {this.state.lastInput}\n          viewImage = {this.viewImageHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}